[{"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\index.tsx":"1","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\App.tsx":"3","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\Routes.tsx":"4","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\shared\\index.ts":"5","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\layouts\\index.ts":"6","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\modules\\index.ts":"7","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\layouts\\center-layout\\center-layout.component.tsx":"8","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\shared\\route-layout\\route-layout.component.tsx":"9","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\modules\\pet\\index.tsx":"10","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\modules\\pet\\screens\\index.ts":"11","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\modules\\pet\\screens\\view-pet.screen.tsx":"12","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\modules\\pet\\screens\\list-pets.screen.tsx":"13","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\shared\\form-builder\\form-builder.shared.tsx":"14","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\modules\\pet\\service\\index.ts":"15","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\modules\\pet\\service\\pet.service.ts":"16","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\api\\index.ts":"17","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\api\\base.api.ts":"18","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\shared\\datatable\\datatable.shared.tsx":"19","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\shared\\datatable\\components\\index.ts":"20","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\shared\\datatable\\components\\table-header.component.tsx":"21"},{"size":515,"mtime":1610964289562,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":243,"mtime":1611147297709,"results":"25","hashOfConfig":"23"},{"size":760,"mtime":1610970647540,"results":"26","hashOfConfig":"23"},{"size":227,"mtime":1611057268612,"results":"27","hashOfConfig":"23"},{"size":82,"mtime":1610969994800,"results":"28","hashOfConfig":"23"},{"size":45,"mtime":1610969994800,"results":"29","hashOfConfig":"23"},{"size":477,"mtime":1611137694128,"results":"30","hashOfConfig":"23"},{"size":682,"mtime":1611151696344,"results":"31","hashOfConfig":"23"},{"size":818,"mtime":1610970586867,"results":"32","hashOfConfig":"23"},{"size":126,"mtime":1610970407129,"results":"33","hashOfConfig":"23"},{"size":5382,"mtime":1611158991228,"results":"34","hashOfConfig":"23"},{"size":2760,"mtime":1611142517313,"results":"35","hashOfConfig":"23"},{"size":4380,"mtime":1611154204595,"results":"36","hashOfConfig":"23"},{"size":54,"mtime":1611056142227,"results":"37","hashOfConfig":"23"},{"size":1719,"mtime":1611154362717,"results":"38","hashOfConfig":"23"},{"size":44,"mtime":1611056142219,"results":"39","hashOfConfig":"23"},{"size":1007,"mtime":1611154362751,"results":"40","hashOfConfig":"23"},{"size":1596,"mtime":1611150076466,"results":"41","hashOfConfig":"23"},{"size":66,"mtime":1611057677242,"results":"42","hashOfConfig":"23"},{"size":3207,"mtime":1611149890044,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"wfguwo",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\index.tsx",[],["90","91"],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\App.tsx",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\Routes.tsx",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\shared\\index.ts",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\layouts\\index.ts",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\modules\\index.ts",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\layouts\\center-layout\\center-layout.component.tsx",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\shared\\route-layout\\route-layout.component.tsx",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\modules\\pet\\index.tsx",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\modules\\pet\\screens\\index.ts",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\modules\\pet\\screens\\view-pet.screen.tsx",["92"],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\modules\\pet\\screens\\list-pets.screen.tsx",["93"],"import React, { useCallback, useEffect, useState } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { Button, Col, Container, Row } from 'reactstrap';\r\nimport { IPet, ITableConfig } from '../../../core/interfaces';\r\nimport { Datatable } from '../../../core/shared';\r\nimport { PetService } from '../service'\r\nimport { FaPaw } from 'react-icons/fa';\r\nimport { IDatatableAction } from '../../../core/actions';\r\n\r\nconst ListPetsScreen = () => {\r\n    const { search } = useLocation();\r\n    const { push } = useHistory();\r\n\r\n    const config: ITableConfig[] = [\r\n        {\r\n            title: 'Pet Name',\r\n            column: 'name'\r\n        },\r\n        {\r\n            title: 'Breed',\r\n            column: 'breed'\r\n        },\r\n        {\r\n            title: 'Age',\r\n            column: 'age'\r\n        },\r\n        {\r\n            title: 'Gender',\r\n            column: 'gender'\r\n        },\r\n        {\r\n            title: 'Date Added',\r\n            column: 'createdAt',\r\n            date: true\r\n        }\r\n    ]\r\n\r\n    const [pets, setPets] = useState<IPet[]>([]);\r\n\r\n\r\n    const init = useCallback(async (params?: any) => {\r\n        const res = await PetService.FetchPets(params || null);\r\n        if (res) {\r\n            setPets(res);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [init])\r\n\r\n\r\n    useEffect(() => {\r\n        const params = new URLSearchParams(search);\r\n\r\n        let petParams: any = {};\r\n        params.forEach((a, key) => {\r\n            if (!a || a !== '') {\r\n                petParams[key] = a;\r\n            }\r\n        })\r\n\r\n        init(petParams)\r\n    }, [search]);\r\n\r\n    const tableHandler = ({ type, data }: IDatatableAction) => {\r\n        switch (type) {\r\n            case 'ON_CLICK_ROW':\r\n                const selectedPet: IPet = data;\r\n                push('/' + selectedPet._id);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row className='my-3'>\r\n                <Col className='display-4 d-flex justify-content-center'>\r\n                    <FaPaw className='mr-2' />\r\n                    Pets\r\n                </Col>\r\n            </Row>\r\n            <Row className='my-2'>\r\n                <Col>\r\n                    <Button onClick={() => push('/create')} color={'info'}>Add a Pet</Button>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Datatable\r\n                        headers={config}\r\n                        data={pets}\r\n                        handler={tableHandler}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default ListPetsScreen\r\n","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\shared\\form-builder\\form-builder.shared.tsx",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\modules\\pet\\service\\index.ts",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\modules\\pet\\service\\pet.service.ts",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\api\\index.ts",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\api\\base.api.ts",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\shared\\datatable\\datatable.shared.tsx",["94","95","96","97"],"import { createContext, FC } from 'react';\r\nimport { Button, Table } from 'reactstrap';\r\nimport { IDatatableProps, ITableConfig } from '../../interfaces';\r\nimport { TableHeader } from './components';\r\nimport get from 'lodash/get';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { formatRelative } from 'date-fns';\r\nimport { IDatatableAction } from '../../actions';\r\n\r\ninterface IDatatableContext {\r\n    items: any[]\r\n    headers: ITableConfig[]\r\n}\r\n\r\nconst data = {\r\n    items: [],\r\n    headers: []\r\n}\r\n\r\nexport const DatatableContext = createContext<IDatatableContext>(data);\r\n\r\nconst Datatable: FC<IDatatableProps> = ({ data, headers, handler }) => {\r\n\r\n    return (\r\n        <DatatableContext.Provider value={{ items: data, headers }}>\r\n            <Table striped responsive bordered data-testid='datatable-id'>\r\n                <TableHeader />\r\n                <tbody>\r\n                    {data && data.map((a, i) => <tr key={`${i}${a._id}`} style={{ cursor: 'pointer' }} onClick={() => handler({ type: 'ON_CLICK_ROW', data: a })}>\r\n                        {headers && headers.map(h => (\r\n                            <td key={get(a, h.column)}>\r\n                                {\r\n                                    !h.date ? (get(a, h.column) || 'N/A') : (formatRelative(new Date(get(a, h.column)), new Date()))\r\n                                }\r\n                            </td>\r\n                        ))}\r\n                    </tr>)}\r\n                </tbody>\r\n            </Table>\r\n        </DatatableContext.Provider>\r\n\r\n    )\r\n}\r\n\r\nexport default Datatable\r\n","C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\shared\\datatable\\components\\index.ts",[],"C:\\Users\\drizo\\Desktop\\projects\\cell5\\client-app\\src\\core\\shared\\datatable\\components\\table-header.component.tsx",["98"],"import React, { useCallback, useContext, useEffect, useRef } from 'react'\r\nimport { Button, Input } from 'reactstrap';\r\nimport { DatatableContext } from '../datatable.shared';\r\nimport { FaSortAmountDown, FaSortAmountUp } from 'react-icons/fa';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n\r\nimport debounce from 'lodash/debounce';\r\n\r\nconst TableHeader = () => {\r\n    const {\r\n        headers\r\n    } = useContext(DatatableContext);\r\n\r\n    const formRef = useRef<any>();\r\n\r\n    const { push, location } = useHistory();\r\n\r\n    const { search } = useLocation();\r\n\r\n    const onSortHeader = async (name: string) => {\r\n        const params = new URLSearchParams(search);\r\n\r\n        if (params.has('sort')) {\r\n            if (params.get('sort') && params.get('sort')?.includes('asc')) {\r\n                params.set('sort', `${name} desc`);\r\n            } else {\r\n                params.set('sort', `${name} asc`);\r\n            }\r\n\r\n        } else {\r\n            params.append('sort', `${name} asc`);\r\n        }\r\n\r\n        push({\r\n            pathname: location.pathname,\r\n            search: params.toString()\r\n        })\r\n    }\r\n\r\n    const onBlurSearch = (value: string, name: string) => {\r\n\r\n        const params = new URLSearchParams(search);\r\n\r\n        if (params.has(name)) {\r\n            value ? params.set(name, value) : params.set(name, '');\r\n        } else {\r\n            params.append(name, value);\r\n        }\r\n\r\n        push({\r\n            pathname: location.pathname,\r\n            search: params.toString()\r\n        })\r\n    }\r\n\r\n    const onSearchColumn = debounce((search: string, name: string) => {\r\n        onBlurSearch(search, name)\r\n    }, 1000)\r\n\r\n    const getDefaultValue = useCallback((name: string) => {\r\n        const params = new URLSearchParams(search);\r\n        return params.get(name);\r\n    }, [search])\r\n\r\n    const onRenderSort = (column: string) => {\r\n        const params = new URLSearchParams(search);\r\n        return params && params.get('sort') && params.get('sort')?.includes(column + ' ') ? (params.get('sort')?.includes('asc') ? <FaSortAmountUp /> : <FaSortAmountDown />) : ''\r\n    }\r\n\r\n    return (\r\n        <thead className='thead-dark' data-testid='tableheader-id'>\r\n            <tr>\r\n                {headers && headers.map(a => (\r\n                    <th key={a.title}>\r\n                        <div className='d-flex justify-content-between mb-2' style={{ cursor: 'pointer' }} onClick={() => onSortHeader(a.column)}>\r\n                            <span>\r\n                                {a.title}\r\n                            </span>\r\n                            <span>\r\n                                {onRenderSort(a.column)}\r\n                            </span>\r\n                        </div>\r\n                        {!a.date ?\r\n                            <Input defaultValue={getDefaultValue(a.column) || ''} onChange={e => onSearchColumn(e.target.value, a.column)} bsSize={'sm'} /> : <Button onClick={() => formRef.current.reset()} size={'sm'} type='button' block>Select Date Range</Button>\r\n                        }\r\n                    </th>\r\n                ))}\r\n            </tr>\r\n        </thead >\r\n    )\r\n}\r\n\r\nexport default TableHeader;\r\n",{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":20,"column":8,"nodeType":"105","endLine":20,"endColumn":12,"suggestions":"106"},{"ruleId":"103","severity":1,"message":"107","line":64,"column":8,"nodeType":"105","endLine":64,"endColumn":16,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":2,"column":10,"nodeType":"111","messageId":"112","endLine":2,"endColumn":16},{"ruleId":"109","severity":1,"message":"113","line":6,"column":10,"nodeType":"111","messageId":"112","endLine":6,"endColumn":20},{"ruleId":"109","severity":1,"message":"114","line":6,"column":22,"nodeType":"111","messageId":"112","endLine":6,"endColumn":33},{"ruleId":"109","severity":1,"message":"115","line":8,"column":10,"nodeType":"111","messageId":"112","endLine":8,"endColumn":26},{"ruleId":"109","severity":1,"message":"116","line":1,"column":42,"nodeType":"111","messageId":"112","endLine":1,"endColumn":51},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPet'. Either include it or remove the dependency array.","ArrayExpression",["119"],"React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.",["120"],"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'useLocation' is defined but never used.","'IDatatableAction' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [fetchPet, id]",{"range":"125","text":"126"},"Update the dependencies array to be: [init, search]",{"range":"127","text":"128"},[699,703],"[fetchPet, id]",[1628,1636],"[init, search]"]